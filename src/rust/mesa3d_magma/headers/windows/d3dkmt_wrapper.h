// Copyright 2023 The ChromiumOS Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file contains a series of minimal includes, typedefs, and defines that
// are needed to include d3dkmthk.h. To generate bindings you can run the
// following command:
/*
bindgen d3dkmt_wrapper.h `
       --disable-header-comment `
       --no-layout-tests `
       --no-doc-comments `
       --with-derive-default `
       --size_t-is-usize `
       --raw-line "/// Automatically generated by bindgen. See d3dkmt_wrapper.h for instructions." `
       -o bindings.rs
*/

#include <stddef.h>

#ifndef GUID_DEFINED
#define GUID_DEFINED
#if defined(__midl)
typedef struct {
    unsigned long  Data1;
    unsigned short Data2;
    unsigned short Data3;
    byte           Data4[ 8 ];
} GUID;
#else
typedef struct _GUID {
    unsigned long  Data1;
    unsigned short Data2;
    unsigned short Data3;
    unsigned char  Data4[ 8 ];
} GUID;
#endif
#endif

#ifndef FAR
#ifdef _WIN32
#define FAR
#else
#define FAR _far
#endif
#endif

#ifndef DECLSPEC_SELECTANY
#if (_MSC_VER >= 1100)
#define DECLSPEC_SELECTANY  __declspec(selectany)
#else
#define DECLSPEC_SELECTANY
#endif
#endif

#ifndef EXTERN_C
#ifdef __cplusplus
#define EXTERN_C    extern "C"
#else
#define EXTERN_C    extern
#endif
#endif

#ifdef DEFINE_GUID
#undef DEFINE_GUID
#endif

#ifdef INITGUID
#define DEFINE_GUID(name, l, w1, w2, b1, b2, b3, b4, b5, b6, b7, b8) \
        EXTERN_C const GUID DECLSPEC_SELECTANY name \
                = { l, w1, w2, { b1, b2,  b3,  b4,  b5,  b6,  b7,  b8 } }
#else
#define DEFINE_GUID(name, l, w1, w2, b1, b2, b3, b4, b5, b6, b7, b8) \
    EXTERN_C const GUID FAR name
#endif // INITGUID

#include <string.h>

// These annotations are defined here to be no-ops
#define _IRQL_requires_max_(x)
#define _IRQL_requires_(x)

// See winnt.h
#define C_ASSERT(e) typedef char __C_ASSERT__[(e)?1:-1]
#define DECLARE_HANDLE(name) struct name##__{int unused;}; typedef struct name##__ *name

// See minwindef.h
#define WINAPI      __stdcall
#define APIENTRY    WINAPI
#define CONST const
#define VOID void
#define IN
#define OUT
#define MAX_PATH 260

// See basetsd.h
typedef signed char         INT8, *PINT8;
typedef signed short        INT16, *PINT16;
typedef signed int          INT32, *PINT32;
typedef signed __int64      INT64, *PINT64;
typedef unsigned char       UINT8, *PUINT8;
typedef unsigned short      UINT16, *PUINT16;
typedef unsigned int        UINT32, *PUINT32;
typedef unsigned __int64    UINT64, *PUINT64;
typedef unsigned __int64    ULONG64;
typedef unsigned __int32    int32_t;
typedef __int64             LONG64;
#if defined(_WIN64)
    typedef unsigned __int64 UINT_PTR;
    typedef unsigned __int64 ULONG_PTR;
#else
    typedef _W64 unsigned int UINT_PTR;
    typedef _W64 unsigned long ULONG_PTR;
#endif
typedef ULONG_PTR           SIZE_T;

// See minwindef.h
typedef unsigned long       DWORD;
typedef int                 BOOL;
typedef unsigned char       BYTE;
typedef unsigned short      WORD;
typedef float               FLOAT;
typedef void                *LPVOID;
typedef int                 INT;
typedef unsigned int        UINT;
typedef unsigned int        *PUINT;
typedef unsigned long       ULONG;
typedef unsigned short      USHORT;
typedef unsigned char       UCHAR;

// See winnt.h
typedef void                *PVOID;
typedef char                CHAR;
typedef short               SHORT;
typedef long                LONG;
typedef wchar_t             WCHAR;
typedef CONST WCHAR         *PCWSTR;
typedef PVOID               HANDLE;
#if !defined(_M_IX86)
typedef unsigned __int64    ULONGLONG;
typedef __int64             LONGLONG;
#else
typedef double              ULONGLONG;
typedef double              LONGLONG;
#endif
typedef union _LARGE_INTEGER {
    struct {
        DWORD LowPart;
        LONG  HighPart;
    } DUMMYSTRUCTNAME;
    struct {
        DWORD LowPart;
        LONG  HighPart;
    } u;
    LONGLONG QuadPart;
} LARGE_INTEGER, *PLARGE_INTEGER;
typedef BYTE                BOOLEAN;

// See https://learn.microsoft.com/en-us/windows/win32/winprog/windows-data-types
typedef HANDLE              HDC;
typedef HANDLE              HWND;

// See bcrypt.h
typedef LONG                NTSTATUS;

// See winnt.h
typedef struct _LUID {
    DWORD LowPart;
    LONG  HighPart;
} LUID, *PLUID;

// See windef.h
typedef struct tagRECT {
    LONG left;
    LONG top;
    LONG right;
    LONG bottom;
} RECT, *PRECT, *NPRECT, *LPRECT;
typedef struct _RECTL {
    LONG left;
    LONG top;
    LONG right;
    LONG bottom;
} RECTL, *PRECTL, *LPRECTL;
typedef struct tagPOINT {
    LONG x;
    LONG y;
} POINT, *PPOINT, *NPPOINT, *LPPOINT;

// See wingdi.h
typedef struct tagPALETTEENTRY {
    BYTE peRed;
    BYTE peGreen;
    BYTE peBlue;
    BYTE peFlags;
} PALETTEENTRY, *PPALETTEENTRY, *LPPALETTEENTRY;

typedef struct displayPortStub {
   int fake_data;
} D3DKMT_DISPLAYPORT_OPERATION_HEADER;

#define _In_
#define _Out_
#define _Field_size_(size)
#define _Field_size_opt_(size)
#define _Field_size_bytes_(size)
#define _Field_range_(min,max)
#define _In_reads_bytes_opt_(size)
#define _Inout_
#define _Check_return_
#define _In_range_(a, b)
#define _In_reads_(numObjs)
#define _Out_writes_bytes_(size)
#define _Out_writes_bytes_all_opt_(size)
#define _Field_size_bytes_part_(BufferSizeSupplied, BufferSizeRequired)

#include <d3dkmthk.h>
